<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lisizero.github.io/</id>
    <title>Gridea</title>
    <updated>2021-10-30T05:44:09.039Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lisizero.github.io/"/>
    <link rel="self" href="https://lisizero.github.io/atom.xml"/>
    <subtitle>最短的捷径就是绕远路</subtitle>
    <logo>https://lisizero.github.io/images/avatar.png</logo>
    <icon>https://lisizero.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[品优购]]></title>
        <id>https://lisizero.github.io/post/pin-you-gou/</id>
        <link href="https://lisizero.github.io/post/pin-you-gou/">
        </link>
        <updated>2021-10-30T02:48:08.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://lisizero.github.io//post-images/1635562100526.png" alt="" loading="lazy"><br>
<img src="https://lisizero.github.io//post-images/1635572079423.png" alt="" loading="lazy"><br>
<img src="https://lisizero.github.io//post-images/1635572252430.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[过渡]]></title>
        <id>https://lisizero.github.io/post/guo-du/</id>
        <link href="https://lisizero.github.io/post/guo-du/">
        </link>
        <updated>2021-10-29T17:57:41.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://lisizero.github.io//post-images/1635530277300.png" alt="" loading="lazy"><br>
<img src="https://lisizero.github.io//post-images/1635530426678.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[子元素选择器]]></title>
        <id>https://lisizero.github.io/post/zi-yuan-su-xuan-ze-qi/</id>
        <link href="https://lisizero.github.io/post/zi-yuan-su-xuan-ze-qi/">
        </link>
        <updated>2021-10-10T14:38:28.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://lisizero.github.io//post-images/1633876722669.png" alt="" loading="lazy"><br>
<img src="https://lisizero.github.io//post-images/1633877006152.png" alt="" loading="lazy"><br>
<img src="https://lisizero.github.io//post-images/1633877031355.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[后代选择器]]></title>
        <id>https://lisizero.github.io/post/hou-dai-xuan-ze-qi/</id>
        <link href="https://lisizero.github.io/post/hou-dai-xuan-ze-qi/">
        </link>
        <updated>2021-10-10T14:02:15.000Z</updated>
        <content type="html"><![CDATA[<p>后代选择器又称为包含选择器 ，可以选择父元素里面的子元素 。其写法就是把最外层标签写在前面 ，内层标签写在后面，中间用空格分隔 。当标签发送嵌套时，内层标签就成为外层标签的后代。</p>
<figure data-type="image" tabindex="1"><img src="https://lisizero.github.io//post-images/1633875791985.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://lisizero.github.io//post-images/1633876078745.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://lisizero.github.io//post-images/1633876160176.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 的复合选择器]]></title>
        <id>https://lisizero.github.io/post/css-de-fu-he-xuan-ze-qi/</id>
        <link href="https://lisizero.github.io/post/css-de-fu-he-xuan-ze-qi/">
        </link>
        <updated>2021-10-10T13:33:12.000Z</updated>
        <content type="html"><![CDATA[<p>在 CSS 中 ， 可以根据选择器的类型把选择器分为基础选择器和复合选择器 ， 复合选择器是建立在基础选择器之上 ， 对基本选择器进行组合形成的 。</p>
<ol>
<li>复合选择器可以更准确，更高效的选择目标元素 （标签）</li>
<li>复合选择器是由两个或多个基础选择器 ，通过不同的方式组合而成的</li>
<li>常用的复合选择器包括 ：后代选择器 ，子选择器，并集选择器，伪类选择器等等</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emmet 语法]]></title>
        <id>https://lisizero.github.io/post/emmet-yu-fa/</id>
        <link href="https://lisizero.github.io/post/emmet-yu-fa/">
        </link>
        <updated>2021-10-10T10:34:39.000Z</updated>
        <content type="html"><![CDATA[<p>Emmet语法的前身是Zen coding,它使用缩写，来提高html/css的编写速度，Vsacode内部已经集成该语法。</p>
<ol>
<li>快速生成HTML结构语法。</li>
<li>快速生成CSS样式语法。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://lisizero.github.io//post-images/1633863460352.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 引入方式总结]]></title>
        <id>https://lisizero.github.io/post/css-yin-ru-fang-shi-zong-jie/</id>
        <link href="https://lisizero.github.io/post/css-yin-ru-fang-shi-zong-jie/">
        </link>
        <updated>2021-10-10T09:11:59.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://lisizero.github.io//post-images/1633857168671.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[外部样式表]]></title>
        <id>https://lisizero.github.io/post/wai-bu-yang-shi-biao/</id>
        <link href="https://lisizero.github.io/post/wai-bu-yang-shi-biao/">
        </link>
        <updated>2021-10-10T08:57:43.000Z</updated>
        <content type="html"><![CDATA[<p>实际开发都是外部样式表。适合于样式较多的情况，核心是：样式单独写到CSS文件中，之后把 CSS 文件引入到 HTML 页面中使用。<br>
引入外部样式表分为两步 ：</p>
<ol>
<li>新建一个后缀名为 .CSS的样式文件，把所有 CSS 代码都放入此文件中。</li>
<li>在 HTML 页面中 ，使用 link 标签 引入这个文件。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://lisizero.github.io//post-images/1633856566040.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文本属性总结]]></title>
        <id>https://lisizero.github.io/post/wen-ben-shu-xing-zong-jie/</id>
        <link href="https://lisizero.github.io/post/wen-ben-shu-xing-zong-jie/">
        </link>
        <updated>2021-10-10T08:10:26.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>属性</th>
<th>表示</th>
<th>注意点</th>
</tr>
</thead>
<tbody>
<tr>
<td>color</td>
<td>文本颜色</td>
<td>我们通常用 十六进制 比如 而且是简写方式 #ffff</td>
</tr>
<tr>
<td>text -align</td>
<td>文本对齐</td>
<td>可以设定文字水平的对齐方式</td>
</tr>
<tr>
<td>text-indent</td>
<td>文本缩进</td>
<td>通常我们用于段落缩进2个字的距离 text-indent 2em;</td>
</tr>
<tr>
<td>text-decoration</td>
<td>文本修饰</td>
<td>记住 添加下划线 underline 取消下划线 none</td>
</tr>
<tr>
<td>line-height</td>
<td>行高</td>
<td>控制行与行之间的距离</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[font-style字体样式]]></title>
        <id>https://lisizero.github.io/post/font-style-zi-ti-yang-shi/</id>
        <link href="https://lisizero.github.io/post/font-style-zi-ti-yang-shi/">
        </link>
        <updated>2021-10-10T07:40:44.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://lisizero.github.io//post-images/1633851696197.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>